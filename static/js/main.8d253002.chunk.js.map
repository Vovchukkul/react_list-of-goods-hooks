{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Default","sortType","setSortType","isReverseActive","setIsReverseActive","sortedGoods","useMemo","goods","sorted","Alphabetical","sort","Length","good1","good2","length","reverse","getSortedGoods","className","type","classNames","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,qBAAAA,I,+BAAAA,I,oBAAAA,M,KA0BE,IAAME,EAAgB,WAC3B,MAAgCC,mBAAmBH,EAASI,SAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8CH,oBAAS,GAAvD,mBAAOI,EAAP,KAAwBC,EAAxB,KAOMC,EAAcC,mBAAQ,kBA7B9B,SACEC,EACAN,EACAE,GAEA,IAAIK,EAAM,YAAOD,GAYjB,OAVIN,IAAaL,EAASa,aACxBD,EAASA,EAAOE,OACPT,IAAaL,EAASe,SAC/BH,EAASA,EAAOE,MAAK,SAACE,EAAOC,GAAR,OAAkBD,EAAME,OAASD,EAAMC,WAG1DX,IACFK,EAASA,EAAOO,WAGXP,EAY2BQ,CAChCnB,EACAI,EACAE,KACC,CAACF,EAAUE,IAEd,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SAAU,UACV,CAAE,WAAYlB,IAAaL,EAASa,eAEtCW,QAAS,WACPlB,EAAYN,EAASa,eAPzB,iCAaA,wBACES,KAAK,SACLD,UAAWE,IACT,SAAU,aACV,CAAE,WAAYlB,IAAaL,EAASe,SAEtCS,QAAS,WACPlB,EAAYN,EAASe,SAPzB,4BAaA,wBACEO,KAAK,SACLD,UAAWE,IACT,SAAU,aACV,CAAE,YAAahB,IAEjBiB,QAAS,WACPhB,GAAmB,SAAAiB,GAAI,OAAKA,MAPhC,qBAaCpB,IAAaL,EAASI,SAAWG,EAChC,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAzDS,WACjBlB,EAAYN,EAASI,SACrBI,GAAmB,IAoDb,mBAOE,QAGN,6BACGC,EAAYiB,KAAI,SAACC,GAAD,OACf,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YC/GnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8d253002.chunk.js","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Default,\n  Alphabetical,\n  Length,\n}\n\nfunction getSortedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReverseActive: boolean,\n) {\n  let sorted = [...goods];\n\n  if (sortType === SortType.Alphabetical) {\n    sorted = sorted.sort();\n  } else if (sortType === SortType.Length) {\n    sorted = sorted.sort((good1, good2) => good1.length - good2.length);\n  }\n\n  if (isReverseActive) {\n    sorted = sorted.reverse();\n  }\n\n  return sorted;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState<SortType>(SortType.Default);\n  const [isReverseActive, setIsReverseActive] = useState(false);\n\n  const resetGoods = () => {\n    setSortType(SortType.Default);\n    setIsReverseActive(false);\n  };\n\n  const sortedGoods = useMemo(() => getSortedGoods(\n    goodsFromServer,\n    sortType,\n    isReverseActive,\n  ), [sortType, isReverseActive]);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button', 'is-info',\n            { 'is-light': sortType !== SortType.Alphabetical },\n          )}\n          onClick={() => {\n            setSortType(SortType.Alphabetical);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button', 'is-success',\n            { 'is-light': sortType !== SortType.Length },\n          )}\n          onClick={() => {\n            setSortType(SortType.Length);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button', 'is-warning',\n            { 'is-light': !isReverseActive },\n          )}\n          onClick={() => {\n            setIsReverseActive(prev => !prev);\n          }}\n        >\n          Reverse\n        </button>\n\n        {sortType !== SortType.Default || isReverseActive ? (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetGoods}\n          >\n            Reset\n          </button>\n        ) : null}\n      </div>\n\n      <ul>\n        {sortedGoods.map((good) => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}