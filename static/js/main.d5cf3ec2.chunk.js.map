{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","originalGoods","useState","visibleGoods","setVisibleGoods","Default","sortType","setSortType","isReverseActive","setIsReverseActive","useEffect","sortedGoods","Alphabetical","sort","Length","good1","good2","length","reverse","sortGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,qBAAAA,I,+BAAAA,I,oBAAAA,M,KAME,IAAME,EAAgB,WAC3B,IAAMC,EAAa,UAAOF,GAC1B,EAAwCG,mBAAmBD,GAA3D,mBAAOE,EAAP,KAAqBC,EAArB,KACA,EAAgCF,mBAAmBJ,EAASO,SAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8CL,oBAAS,GAAvD,mBAAOM,EAAP,KAAwBC,EAAxB,KAmCA,OAJAC,qBAAU,YA7BQ,WAChB,IAAIC,EAAqB,YAAOR,GAEhC,OAAQG,GACN,KAAKR,EAASc,aACZD,EAAcA,EAAYE,OAC1B,MACF,KAAKf,EAASgB,OACZH,EAAcA,EAAYE,MACxB,SAACE,EAAOC,GAAR,OAAkBD,EAAME,OAASD,EAAMC,UAOzCT,GACFG,EAAYO,UAGdd,EAAgBO,GAUhBQ,KACC,CAACb,EAAUE,IAGZ,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SAAU,UACV,CAAE,WAAYhB,IAAaR,EAASc,eAEtCW,QAAS,WACPhB,EAAYT,EAASc,eAPzB,iCAaA,wBACES,KAAK,SACLD,UAAWE,IACT,SAAU,aACV,CAAE,WAAYhB,IAAaR,EAASgB,SAEtCS,QAAS,WACPhB,EAAYT,EAASgB,SAPzB,4BAaA,wBACEO,KAAK,SACLD,UAAWE,IACT,SAAU,aACV,CAAE,YAAad,IAEjBe,QAAS,WACPd,GAAoBD,IAPxB,qBAaCF,IAAaR,EAASO,SAAWG,EAChC,wBACEa,KAAK,SACLD,UAAU,4BACVG,QAxDS,WACjBhB,EAAYT,EAASO,SACrBI,GAAmB,GACnBL,EAAgBH,IAkDV,mBAOE,QAGN,6BACGE,EAAaqB,KAAI,SAACC,GAAD,OAChB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YCnHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d5cf3ec2.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Default,\n  Alphabetical,\n  Length,\n}\n\nexport const App: React.FC = () => {\n  const originalGoods = [...goodsFromServer];\n  const [visibleGoods, setVisibleGoods] = useState<string[]>(originalGoods);\n  const [sortType, setSortType] = useState<SortType>(SortType.Default);\n  const [isReverseActive, setIsReverseActive] = useState(false);\n\n  const sortGoods = () => {\n    let sortedGoods: string[] = [...visibleGoods];\n\n    switch (sortType) {\n      case SortType.Alphabetical:\n        sortedGoods = sortedGoods.sort();\n        break;\n      case SortType.Length:\n        sortedGoods = sortedGoods.sort(\n          (good1, good2) => good1.length - good2.length,\n        );\n        break;\n      default:\n        break;\n    }\n\n    if (isReverseActive) {\n      sortedGoods.reverse();\n    }\n\n    setVisibleGoods(sortedGoods);\n  };\n\n  const resetGoods = () => {\n    setSortType(SortType.Default);\n    setIsReverseActive(false);\n    setVisibleGoods(originalGoods);\n  };\n\n  useEffect(() => {\n    sortGoods();\n  }, [sortType, isReverseActive]);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button', 'is-info',\n            { 'is-light': sortType !== SortType.Alphabetical },\n          )}\n          onClick={() => {\n            setSortType(SortType.Alphabetical);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button', 'is-success',\n            { 'is-light': sortType !== SortType.Length },\n          )}\n          onClick={() => {\n            setSortType(SortType.Length);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button', 'is-warning',\n            { 'is-light': !isReverseActive },\n          )}\n          onClick={() => {\n            setIsReverseActive(!isReverseActive);\n          }}\n        >\n          Reverse\n        </button>\n\n        {sortType !== SortType.Default || isReverseActive ? (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetGoods}\n          >\n            Reset\n          </button>\n        ) : null}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}